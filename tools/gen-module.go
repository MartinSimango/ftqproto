package main

import (
	"fmt"
	"io/ioutil"
	"log"
	"os"
	"strings"

	"github.com/MartinSimango/ftqproto/tools/gen-module/module"
	"gopkg.in/yaml.v2"
)

var template string = `

### THIS FILE IS GENERATED BY THE GEN-MODULE TOOL ###

CPP=%s
CFLAGS=%s
ODIR=../../../build/obj
LDIR=../../../build/lib


.PHONY: build

MODULE_NAME=%s
LIB_NAME=%s

DRIVER:=../../driver/$(MODULE_NAME)/src/%%.cpp
ADAPTER:=../../adapter/$(MODULE_NAME)/src/%%.cpp
USECASE:=../../usecase/$(MODULE_NAME)/src/%%.cpp
DOMAIN:=../../domain/$(MODULE_NAME)/src/%%.cpp


HEADER_FILES:=$(wildcard ../../*/$(MODULE_NAME)/include/*.h*)

# SOURCE FILES
SOURCE_FILES:=$(wildcard ../../*/$(MODULE_NAME)/src/*.c*)
DRIVER_SOURCE_FILES:=$(wildcard ../../driver/$(MODULE_NAME)/src/*.c*)
DOMAIN_SOURCE_FILES:=$(wildcard ../../domain/$(MODULE_NAME)/src/*.c*)
ADAPTER_SOURCE_FILES:=$(wildcard ../../adapter/$(MODULE_NAME)/src/*.c*)
USECASE_SOURCE_FILES:=$(wildcard ../../usecase/$(MODULE_NAME)/src/*.c*)

# OBJECT FILES
DRIVER_OBJECT_FILES:=$(patsubst %%.cpp, $(ODIR)/$(MODULE_NAME)/%%.o, $(notdir $(DRIVER_SOURCE_FILES)))
DOMAIN_OBJECT_FILES:=$(patsubst %%.cpp, $(ODIR)/$(MODULE_NAME)/%%.o, $(notdir $(DOMAIN_SOURCE_FILES)))
ADAPTER_OBJECT_FILES:=$(patsubst %%.cpp, $(ODIR)/$(MODULE_NAME)/%%.o, $(notdir $(ADAPTER_SOURCE_FILES)))
USECASE_OBJECT_FILES:=$(patsubst %%.cpp, $(ODIR)/$(MODULE_NAME)/%%.o, $(notdir $(USECASE_SOURCE_FILES)))

OBJECT_FILES:=$(DRIVER_OBJECT_FILES) $(DOMAIN_OBJECT_FILES) $(ADAPTEER_OBJECT_FILES) $(USECASE_OBJECT_FILES)

#DEPENDENCIES 
DRIVER_DEPENDENCIES:=%s
DOMAIN_DEPENDENCIES:=%s
ADAPTER_DEPENDENCIES:=%s
USECASE_DEPENDENCIES:=%s

DEPENDENCIES:=$(DRIVER_DEPENDENCIES) $(DOMAIN_DEPENDENCIES) $(ADAPTER_DEPENDENCIES) $(USECASE_DEPENDENCIES)

$(DRIVER_OBJECT_FILES): $(ODIR)/$(MODULE_NAME)/%%.o : $(DRIVER) $(DRIVER_DEPENDENCIES)
	$(CPP) -c $< -o $@ $(CFLAGS)

$(DOMAIN_OBJECT_FILES): $(ODIR)/$(MODULE_NAME)/%%.o : $(DOMAIN) $(DOMAIN_DEPENDENCIES)
	$(CPP) -c $< -o $@ $(CFLAGS)

$(ADAPTER_OBJECT_FILES): $(ODIR)/$(MODULE_NAME)/%%.o : $(ADAPTER) $(ADAPTER_DEPENDENCIES)
	$(CPP) -c $< -o $@ $(CFLAGS)

$(USECASE_OBJECT_FILES): $(ODIR)/$(MODULE_NAME)/%%.o : $(USECASE) $(USECASE_DEPENDENCIES)
	$(CPP) -c $< -o $@ $(CFLAGS)

build-library: $(OBJECT_FILES)
	ar -crs $(LDIR)/$(MODULE_NAME)/$(LIB_NAME).a $(OBJECT_FILES)
	$(CPP) -shared -fPIC -o $(shell pwd)/$(LDIR)/$(MODULE_NAME)/$(LIB_NAME).so $(SOURCE_FILES) $(DEPENDENCIES) $(CFLAGS)

build: build-library

install:
	sudo cp $(LDIR)/$(MODULE_NAME)/$(LIB_NAME).so %s

%s
`

func main() {

	modulesDirectory := "gen"
	yamlSchema := &module.ModuleDefinition{}
	yamlFile, err := ioutil.ReadFile("module/module.yaml")
	if err != nil {
		log.Printf("yamlFile.Get err #%v ", err)
	}
	err = yaml.Unmarshal(yamlFile, yamlSchema)
	if err != nil {
		log.Fatalf("Unmarshal: %v", err)
	}
	os.RemoveAll("gen")
	err = os.Mkdir(modulesDirectory, 0755)
	if err != nil {
		fmt.Printf("Unable to create directory: %v", err)
	}

	for _, mod := range yamlSchema.Modules {
		modDirectory := modulesDirectory + "/" + mod.Name
		extraMakeRules := ""
		for _, makeRule := range mod.MakeRules {
			extraMakeRules += makeRule.Name + ": "
			extraMakeRules += strings.Join(makeRule.Dependencies, " ") + "\n"
			extraMakeRules += "\t" + strings.Join(makeRule.Commands, "n")
		}

		makefile := fmt.Sprintf(template,
			mod.Compiler,
			mod.Flags,
			mod.Name,
			mod.LibraryName,
			strings.Join(mod.Depedencies.Driver[:], " "),
			strings.Join(mod.Depedencies.Domain[:], " "),
			strings.Join(mod.Depedencies.Adapter[:], " "),
			strings.Join(mod.Depedencies.Usecase[:], " "),
			mod.InstallationFolder,
			extraMakeRules,
		)

		err = os.Mkdir(modDirectory, 0755)
		if err != nil {
			fmt.Printf("Unable to create directory: %v", err)
		}
		err = ioutil.WriteFile(modDirectory+"/Makefile", []byte(makefile), 0755)
		if err != nil {
			fmt.Printf("Unable to write file: %v", err)
		}

	}
}

// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: CreateRequest.proto

#include "CreateRequest.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace req {
constexpr CreateRequest::CreateRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : sourcefilepath_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , destinationfilepath_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , files_(nullptr)
  , numfiles_(0){}
struct CreateRequestDefaultTypeInternal {
  constexpr CreateRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CreateRequestDefaultTypeInternal() {}
  union {
    CreateRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CreateRequestDefaultTypeInternal _CreateRequest_default_instance_;
}  // namespace req
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_CreateRequest_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_CreateRequest_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_CreateRequest_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_CreateRequest_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::req::CreateRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::req::CreateRequest, sourcefilepath_),
  PROTOBUF_FIELD_OFFSET(::req::CreateRequest, destinationfilepath_),
  PROTOBUF_FIELD_OFFSET(::req::CreateRequest, numfiles_),
  PROTOBUF_FIELD_OFFSET(::req::CreateRequest, files_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::req::CreateRequest)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::req::_CreateRequest_default_instance_),
};

const char descriptor_table_protodef_CreateRequest_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\023CreateRequest.proto\022\003req\032\021RequestFile."
  "proto\"x\n\rCreateRequest\022\026\n\016sourceFilePath"
  "\030\001 \001(\t\022\033\n\023destinationFilePath\030\002 \001(\t\022\020\n\010n"
  "umFiles\030\003 \001(\005\022 \n\005files\030\004 \001(\0132\021.req.Reque"
  "stFilesb\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_CreateRequest_2eproto_deps[1] = {
  &::descriptor_table_RequestFile_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_CreateRequest_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_CreateRequest_2eproto = {
  false, false, 175, descriptor_table_protodef_CreateRequest_2eproto, "CreateRequest.proto", 
  &descriptor_table_CreateRequest_2eproto_once, descriptor_table_CreateRequest_2eproto_deps, 1, 1,
  schemas, file_default_instances, TableStruct_CreateRequest_2eproto::offsets,
  file_level_metadata_CreateRequest_2eproto, file_level_enum_descriptors_CreateRequest_2eproto, file_level_service_descriptors_CreateRequest_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_CreateRequest_2eproto_getter() {
  return &descriptor_table_CreateRequest_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_CreateRequest_2eproto(&descriptor_table_CreateRequest_2eproto);
namespace req {

// ===================================================================

class CreateRequest::_Internal {
 public:
  static const ::req::RequestFiles& files(const CreateRequest* msg);
};

const ::req::RequestFiles&
CreateRequest::_Internal::files(const CreateRequest* msg) {
  return *msg->files_;
}
void CreateRequest::clear_files() {
  if (GetArenaForAllocation() == nullptr && files_ != nullptr) {
    delete files_;
  }
  files_ = nullptr;
}
CreateRequest::CreateRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:req.CreateRequest)
}
CreateRequest::CreateRequest(const CreateRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  sourcefilepath_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_sourcefilepath().empty()) {
    sourcefilepath_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_sourcefilepath(), 
      GetArenaForAllocation());
  }
  destinationfilepath_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_destinationfilepath().empty()) {
    destinationfilepath_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_destinationfilepath(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_files()) {
    files_ = new ::req::RequestFiles(*from.files_);
  } else {
    files_ = nullptr;
  }
  numfiles_ = from.numfiles_;
  // @@protoc_insertion_point(copy_constructor:req.CreateRequest)
}

void CreateRequest::SharedCtor() {
sourcefilepath_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
destinationfilepath_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&files_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&numfiles_) -
    reinterpret_cast<char*>(&files_)) + sizeof(numfiles_));
}

CreateRequest::~CreateRequest() {
  // @@protoc_insertion_point(destructor:req.CreateRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CreateRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  sourcefilepath_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  destinationfilepath_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete files_;
}

void CreateRequest::ArenaDtor(void* object) {
  CreateRequest* _this = reinterpret_cast< CreateRequest* >(object);
  (void)_this;
}
void CreateRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CreateRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CreateRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:req.CreateRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  sourcefilepath_.ClearToEmpty();
  destinationfilepath_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && files_ != nullptr) {
    delete files_;
  }
  files_ = nullptr;
  numfiles_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CreateRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string sourceFilePath = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_sourcefilepath();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "req.CreateRequest.sourceFilePath"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string destinationFilePath = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_destinationfilepath();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "req.CreateRequest.destinationFilePath"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 numFiles = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          numfiles_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .req.RequestFiles files = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_files(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CreateRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:req.CreateRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string sourceFilePath = 1;
  if (!this->sourcefilepath().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_sourcefilepath().data(), static_cast<int>(this->_internal_sourcefilepath().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "req.CreateRequest.sourceFilePath");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_sourcefilepath(), target);
  }

  // string destinationFilePath = 2;
  if (!this->destinationfilepath().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_destinationfilepath().data(), static_cast<int>(this->_internal_destinationfilepath().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "req.CreateRequest.destinationFilePath");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_destinationfilepath(), target);
  }

  // int32 numFiles = 3;
  if (this->numfiles() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_numfiles(), target);
  }

  // .req.RequestFiles files = 4;
  if (this->has_files()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::files(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:req.CreateRequest)
  return target;
}

size_t CreateRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:req.CreateRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string sourceFilePath = 1;
  if (!this->sourcefilepath().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_sourcefilepath());
  }

  // string destinationFilePath = 2;
  if (!this->destinationfilepath().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_destinationfilepath());
  }

  // .req.RequestFiles files = 4;
  if (this->has_files()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *files_);
  }

  // int32 numFiles = 3;
  if (this->numfiles() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_numfiles());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CreateRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:req.CreateRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const CreateRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CreateRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:req.CreateRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:req.CreateRequest)
    MergeFrom(*source);
  }
}

void CreateRequest::MergeFrom(const CreateRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:req.CreateRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from.sourcefilepath().empty()) {
    _internal_set_sourcefilepath(from._internal_sourcefilepath());
  }
  if (!from.destinationfilepath().empty()) {
    _internal_set_destinationfilepath(from._internal_destinationfilepath());
  }
  if (from.has_files()) {
    _internal_mutable_files()->::req::RequestFiles::MergeFrom(from._internal_files());
  }
  if (from.numfiles() != 0) {
    _internal_set_numfiles(from._internal_numfiles());
  }
}

void CreateRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:req.CreateRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CreateRequest::CopyFrom(const CreateRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:req.CreateRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CreateRequest::IsInitialized() const {
  return true;
}

void CreateRequest::InternalSwap(CreateRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &sourcefilepath_, GetArenaForAllocation(),
      &other->sourcefilepath_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &destinationfilepath_, GetArenaForAllocation(),
      &other->destinationfilepath_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CreateRequest, numfiles_)
      + sizeof(CreateRequest::numfiles_)
      - PROTOBUF_FIELD_OFFSET(CreateRequest, files_)>(
          reinterpret_cast<char*>(&files_),
          reinterpret_cast<char*>(&other->files_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CreateRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_CreateRequest_2eproto_getter, &descriptor_table_CreateRequest_2eproto_once,
      file_level_metadata_CreateRequest_2eproto[0]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace req
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::req::CreateRequest* Arena::CreateMaybeMessage< ::req::CreateRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::req::CreateRequest >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
